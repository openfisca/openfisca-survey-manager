name: OpenFisca Survey-Manager

on:
  push:
  pull_request:
    types: [opened, reopened]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-20.04"]  # On peut ajouter "macos-latest" si besoin
        python-version: ["3.7.9", "3.8.9", "3.9.9"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache build
        id: restore-build
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}-${{ matrix.os }}
          restore-keys: |  # in case of a cache miss (systematically unless the same commit is built repeatedly), the keys below will be used to restore dependencies from previous builds, and the cache will be stored at the end of the job, making up-to-date dependencies available for all jobs of the workflow; see more at https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#example-using-the-cache-action
            build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ matrix.os }}
            build-${{ env.pythonLocation }}-${{ matrix.os }}
      - name: Build package
        run: make build
      - name: Cache release
        id: restore-release
        uses: actions/cache@v3
        with:
          path: dist
          key: release-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}-${{ matrix.os }}

  lint-files:
    runs-on: ubuntu-20.04
    needs: [ build ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8.9
      - name: Cache build
        id: restore-build
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}-ubuntu-20.04
      - run: make check-syntax-errors
      - run: make check-style

  test-python:
    runs-on: ${{ matrix.os }}
    needs: [ build ]
    strategy:
      fail-fast: true
      matrix:
        os: [ "ubuntu-20.04" ]  # On peut ajouter "macos-latest" si besoin
        python-version: ["3.7.9", "3.8.9", "3.9.9"]
    env:
      # Needed for coveralls
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache build
        id: restore-build
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}-${{ matrix.os }}
      - name: install
        run: make install
      - name: test
        run: make test
      - name : coverage
        run: coveralls --service=github

  check-version-and-changelog:
    runs-on: ubuntu-20.04
    needs: [ lint-files, test-python ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all the tags
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8.9
      - name: Check version number has been properly updated
        run: "${GITHUB_WORKSPACE}/.github/is-version-number-acceptable.sh"

  check-for-functional-changes:
    runs-on: ubuntu-20.04
    needs: [ check-version-and-changelog ]
    outputs:
      status: ${{ steps.stop-early.outputs.status }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all the tags
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8.9
      - id: stop-early
        run: if "${GITHUB_WORKSPACE}/.github/has-functional-changes.sh" ; then echo "has-functional-changes=success"  >> $GITHUB_ENV ; fi

  test-to-revert:
    runs-on: ubuntu-20.04
    needs: [ check-for-functional-changes ]
    steps:
      - name: IWT
        run: echo "We run !"
        
  test-var-to-revert:
    runs-on: ubuntu-20.04
    needs: [ check-for-functional-changes ]
    if: ${{ env.has-functional-changes }} == 'success'
    steps:
      - name: IWT
        run: echo "has-functional-changes=success !"

  test-varnotset-to-revert:
    runs-on: ubuntu-20.04
    needs: [ check-for-functional-changes ]
    if: ${{ env.has-functional-changes }} != 'success'
    steps:
      - name: IWT
        run: echo "has-functional-changes Failed !"

  deploy:
    runs-on: ubuntu-20.04
    needs: [ check-for-functional-changes ]
    if: github.ref == 'refs/heads/master' # Only triggered for the `master` branch
    env:
      PYPI_USERNAME: openfisca-bot
      PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all the tags
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7.9
      - name: Cache build
        id: restore-build
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}-ubuntu-20.04
      - name: Cache release
        id: restore-release
        uses: actions/cache@v3
        with:
          path: dist
          key: release-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}-ubuntu-20.04
      - name: Upload a Python package to PyPi
        run: twine upload dist/* --username $PYPI_USERNAME --password $PYPI_PASSWORD
      - name: Publish a git tag
        run: "${GITHUB_WORKSPACE}/.github/publish-git-tag.sh"

  publish-to-conda:
    runs-on: "ubuntu-20.04"
    needs: [ deploy ]
    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: "3.7.9"
          # Add conda-forge for OpenFisca-Core
          channels: conda-forge
          activate-environment: true
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all the tags
      - name: Update meta.yaml
        run: |
          python3 -m pip install requests argparse
          python3 .github/get_pypi_info.py -p OpenFisca-Survey-Manager
      - name: Conda Config
        run: |
          conda install conda-build anaconda-client
          conda info
          conda config --set anaconda_upload yes
      - name: Conda build
        run: conda build --token ${{ secrets.ANACONDA_TOKEN }} --user openfisca .conda

  test-on-windows:
    runs-on: "windows-latest"
    needs: [ publish-to-conda ]
    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: "3.9.9"
          # Add conda-forge for OpenFisca-Core
          channels: conda-forge
          activate-environment: true
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all the tags
      - name: Install with conda
        run: conda install -c openfisca openfisca-survey-manager
      - name: Buid Collection
        run: build-collection
